declare <ident> <value>

define function {...}

include <path>

load <location> [limit [offset,]count] using [x,]y [with (
	limit [offset,]count]
	xcol  number
	ycol  selection

	username string
	password string
	token    string
	method   string
	body     string
	tls      [list]
	headers  [list]
)] [as <ident>]

load <<EOD
...
EOD as <ident>

load {expr} as <ident>

location
- local file    (eg: ./file.csv)
- local command (eg: cat file.csv | grep -v '^$')
- http resource (eg: http://localhost:8000/file.csv)
- generate data from function call
- database??? TBD

note: only csv supported now - extension to json/xml to be written

column selectors:
- sum of columns:            c0+...+c9
- range of columns:          c0:c9
- sum range of columns:      c0:+c9
- list of columns/selectors: y0,...,y9

set title string
set theme string

set legend with (
	title    string
	position x[,y]
)

set grid [rows,]cols

set style with(
	fill-color   string[,string...]
	fill-opacity number
	fill-style   solid|...
	line-color   string
	line-width   number
	line-opacity number
	line-type    straight|solid|dashed|dotted
	text-size    number
	text-color   string
	text-family  string[,...]
)

at x,y[,w,h] include <path>
at x,y[,w,h] (
	use <ident> with(...)
	...
)

set padding number[,number[,number[,number]]]
set size    number,number

set xdata   string|number|time
set ydata   string|number|time
set xdomain begin,end
set ydomain begin,end

set shell string[,string...]

set xticks with (
	count       number
	position    top|right|bottom|left
	label       string
	format      string|variable
	inner-ticks true|false
	outer-ticks true|false
	label-ticks true|false
	band-ticks  true|false
)

set yticks with (
	count       number
	position    top|right|bottom|left
	label       string
	format      string|variable
	inner-ticks true|false
	outer-ticks true|false
	label-ticks true|false
	band-ticks  true|false
)

set <type> with (
	type specific option (line,bar,group,...)
)

render [to <file>] <ident> [using [x,]y] <type> [with (...)][,...]